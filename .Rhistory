#if you can move to a bigger bar, then move, otherwise stop
if(e1 < which(nums == e1) + 1){
e1 <- nums[which(nums == e1) + 1]
}
else{
e1 <- e1
}
if(e2 < which(nums == e2) - 1){
e2 <- nums[which(nums == e2) - 1]
}
else{
e2 <- e2
}
w <- which(nums == e2) - which(nums == e1)
h <- min(e1, e2)
a <- w * h
}
return(c(w,h,a))
}
find_max_container(c(1,8,6,2,5,4,8,3,7))
find_max_container(c(1,8,6,2)
)
sort(x)
sort(x)[length(sort(x))]
sort(x)[length(sort(x))-1]
which(nums == 2)
which(x == 2)
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
w <- which(nums == e2) - which(nums == e1)
h <- min(e1, e2)
a <- w * h
widths <- c()
heights <- c()
areas <- c()
for(i in seq_along(nums)){
fp <- max(e1, e2)
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(max(areas))
}
find_max_container(c(1,8,6,2))
find_max_container(c(1,8,6,2,5,4,8,3,7))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
w <- which(nums == e2) - which(nums == e1)
h <- min(e1, e2)
a <- w * h
widths <- c()
heights <- c()
areas <- c()
for(i in seq_along(nums)){
fp <- max(e1, e2)
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(max(areas))
}
find_max_container(c(1,8,6,2,5,4,8,3,7))
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
for(i in seq_along(nums)){
fp <- max(e1, e2)
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(max(areas))
}
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(max(areas))
}
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(areas)
}
find_max_container(c(1,1,100,100,1,1))
return(areas)
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums-1)){
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(areas)
}
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(areas)
}
find_max_container(c(1,1,100,101,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- abs(which(nums == nums[i]) - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(widths)
}
find_max_container(c(1,1,100,101,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- which(nums == nums[i]) - which(nums == fp)
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(widths)
}
find_max_container(c(1,1,100,101,1,1))
which(x[i])
which(x[1])
x[1]
return(areas)
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- nums[i] - which(nums == fp)
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(areas)
}
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- i - which(nums == fp)
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(areas)
}
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- abs(i - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(areas)
}
find_max_container(c(1,1,100,100,1,1))
#Leetcode Q11
find_max_container <- function(nums){
#start with 2 maxes
e1 <- sort(nums)[length(sort(nums))-1]
e2 <- sort(nums)[length(sort(nums))]
# w <- which(nums == e2) - which(nums == e1)
# h <- min(e1, e2)
# a <- w * h
widths <- c()
heights <- c()
areas <- c()
fp <- max(e1, e2)
for(i in seq_along(nums)){
widths[i] <- abs(i - which(nums == fp))
heights[i] <- min(nums[i], fp)
areas[i] <- widths[i] * heights[i]
}
return(max(areas))
}
find_max_container(c(1,1,100,100,1,1))
find_max_container(c(1,8,6,2,5,4,8,3,7))
library(tidyverse)
library(onlineFDR)
library(profvis)
library(formattable)
library(Rcpp)
sample.df <- data.frame(
id = c('A15432', 'B90969', 'C18705', 'B49731', 'E99902',
'C38292', 'A30619', 'D46627', 'E29198', 'A41418',
'D51456', 'C88669', 'E03673', 'A63155', 'B66033'),
date = as.Date(c(rep("2014-12-01",3),
rep("2015-09-21",5),
rep("2016-05-19",2),
"2016-11-12",
rep("2017-03-27",4))),
pval = c(2.90e-08, 0.06743, 0.01514, 0.08174, 0.00171,
3.60e-05, 0.79149, 0.27201, 0.28295, 7.59e-08,
0.69274, 0.30443, 0.00136, 0.72342, 0.54757))
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
d <- sample.df
pval <- sample.df$pval
N <- length(pval)
gammai <- 0.4374901658/(seq_len(N)^(1.6))
alpha <- 0.05
lambda <- 0.5
w0 = alpha/2
alphai <- R <- cand <- Cjplus <- rep(0, N)
candsum <- 0
alphai[1] <- min((1-lambda)*gammai[1]*w0, lambda)
R[1] <- (pval[1] <= alphai[1])
saffron_rcpp_full(N,
lambda,
w0,
alpha,
candsum,
gammai,
Cjplus,
cand,
pval,
alphai,
R)
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
saffron_rcpp_full(N,
lambda,
w0,
alpha,
candsum,
gammai,
Cjplus,
cand,
pval,
alphai,
R)
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
saffron_rcpp_full(N,
lambda,
w0,
alpha,
candsum,
gammai,
Cjplus,
cand,
pval,
alphai,
R)
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
saffron_rcpp_full(N,
lambda,
w0,
alpha,
candsum,
gammai,
Cjplus,
cand,
pval,
alphai,
R)
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
saffron_rcpp_full(N,
lambda,
w0,
alpha,
candsum,
gammai,
Cjplus,
cand,
pval,
alphai,
R)
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
saffron_rcpp_full(N,
lambda,
w0,
alpha,
candsum,
gammai,
Cjplus,
cand,
pval,
alphai,
R)
#cpp
sourceCpp("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR/R/saffron.cpp")
saffron_rcpp_full(N,
lambda,
w0,
alpha,
candsum,
gammai,
Cjplus,
cand,
pval,
alphai,
R)
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny")
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
library(highcharter) #for animated plots
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(lubridate)
library(reactable)
#make sure github dev version is installed
library(onlineFDR)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
expr(br())
rep(expre(br()), 4)
rep(expr(br()), 4)
replicate(expr(br()), 4)
?replicate
replicate(4, expr(br()))
replicate(4, expr(br()), simplify = "vector")
replicate(4, expr(br()), simplify = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?strrep
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("onlineFDRui.R")
source("onlineFDRui.R")
source("onlineFDRserver.R")
source("onlineFDRui.R")
source("onlineFDRserver.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
